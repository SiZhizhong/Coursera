import java.util.ArrayList;
import java.util.List;

import edu.princeton.cs.algs4.StdOut;

/**
 * 
 * @author หน
 * 
 * 
 *
 */


public class Board {
	private final int [][] tiles;
	private final int n;

    // create a board from an n-by-n array of tiles,
    // where tiles[row][col] = tile at (row, col)
    public Board(int[][] tiles) {
    	this.n=tiles.length;
    	this.tiles=new int[n][n];
    	for(int i=0;i<n;i++) {
    		for(int j=0;j<n;j++)
    			this.tiles[i][j]=tiles[i][j];
    	}
    }
                                           
    // string representation of this board
    public String toString() {
    	StringBuffer sb=new StringBuffer();
    	sb.append(Integer.toString(n));
    	for(int i=0;i<n;i++) {
    		sb.append('\n');
    		for(int j=0;j<n;j++) {
    			sb.append(Integer.toString(this.tiles[i][j]));
    		}
    	}
    	return new String(sb);
    }

    // board dimension n
    public int dimension() {
    	return n;
    }

    // number of tiles out of place
    public int hamming() {
    	int sum=0;
    	for(int i=0;i<n;i++) {
    		for(int j=0;j<n;j++) {
    			if(this.tiles[i][j]!=0&&this.tiles[i][j]!=n*i+j+1) sum++;
    		}
    	}
    	return sum;
    }

    // sum of Manhattan distances between tiles and goal
    public int manhattan() {
    	int man=0;
    	int x,y,tile;
    	for (int i=0;i<n;i++) {
    		for(int j=0;j<n;j++) {
    			tile=this.tiles[i][j];
    			if(tile!=0) {
    				man+=Math.abs(i-(tile-1)/n)+Math.abs(j-(tile-1)%n);
    			}
    		}
    	}
    	return man;
    	
    }
    
 

    // is this board the goal board?
    public boolean isGoal() {
    	return this.hamming()==0;
    }

    // does this board equal y?
    public boolean equals(Object y) {
    	if(this==y) return true;
    	if(y instanceof Board) {
    		String stry=y.toString();
    		String strx=this.toString();
    		return(strx.equals(stry));
    	}
    	return false;
    }

    // all neighboring boards
    public Iterable<Board> neighbors(){
    	int sum=0;
    	List<Board> listboard=new ArrayList<Board>();

    	return listboard;
    }
   
    // a board that is obtained by exchanging any pair of tiles
    public Board twin() {
		return null;
    	
    }
    
    

    // unit testing (not graded)
    public static void main(String[] args) {
    	int[][]tiles= {{1,2,3},{4,5,6},{7,8,0}};
    	int[][]tiles2= {{1,3,2},{4,5,6},{7,8,0}};
    	Board b =new Board(tiles);
    	Board b2=new Board(tiles2);
    	Board b3=b;
    	StdOut.println(b.toString());
    	StdOut.println(b.hamming());
    	StdOut.println(b.manhattan());
    	StdOut.println(b.isGoal());
    	StdOut.println(b.isGoal());
    	
    	StdOut.println(b.equals(b2));
    	StdOut.println(b.equals(b3));
    	
    	
    }

}

