import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.In;
public class Solver {
	private final MinPQ<Board> pq;
	private final Hammingcomparator compare_ham;
	private final Manhattancomparator compare_man;
	private int minstep;
	private final List<Board> sol;
	private boolean solved=false;

    // find a solution to the initial board (using the A* algorithm)
    public Solver(Board initial) {
    	if(initial==null) throw new IllegalArgumentException();
    	compare_ham=new Hammingcomparator();
    	compare_man=new Manhattancomparator();
    	sol=new ArrayList<Board>();
    	minstep=-1;
    	pq=new MinPQ(compare_man);
    	pq.insert(initial);
    	Board current=null,pre=null;
    	solved=false;
    	int preMan=initial.manhattan();
    	while(!pq.isEmpty()) {
    		current=(Board) pq.delMin();
    		if(current.manhattan()>preMan) break;
    		sol.add(current);
    		minstep++;
    		if(current.isGoal()) {
    			solved=true;
    			break;
    		}
    		for(Board nei: current.neighbors()) {
    			if(!nei.equals(pre)) pq.insert(nei);
    			pre=current;	
    		}
    	}
    
    }
    
    private void nextstep() {
    	
    }
	private class Hammingcomparator implements Comparator<Board>{

		@Override
		public int compare(Board o1, Board o2) {
			// TODO Auto-generated method stub
			return o1.hamming()-o2.hamming();
		}
		
	}
	
	private class Manhattancomparator implements Comparator<Board>{
		
		@Override
		public int compare(Board o1, Board o2) {
			return o1.manhattan()-o2.manhattan();
		}
	}

    // is the initial board solvable? (see below)
    public boolean isSolvable() {
    	return solved;
    }

    // min number of moves to solve initial board
    public int moves() {
    	return minstep;
    }

    // sequence of boards in a shortest solution
    public Iterable<Board> solution(){
    	return sol;
    }

    // test client (see below) 
    public static void main(String[] args) {

        // create initial board from file
        In in = new In(args[0]);
        int n = in.readInt();
        int[][] tiles = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                tiles[i][j] = in.readInt();
        Board initial = new Board(tiles);

        // solve the puzzle
        Solver solver = new Solver(initial);

        // print solution to standard output
        if (!solver.isSolvable())
            StdOut.println("No solution possible");
        else {
            StdOut.println("Minimum number of moves = " + solver.moves());
            for (Board board : solver.solution())
                StdOut.println(board);
        }
    }

}