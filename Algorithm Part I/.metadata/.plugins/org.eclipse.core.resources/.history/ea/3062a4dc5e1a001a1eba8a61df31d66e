import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.StdOut;
public class Solver {
	private final MinPQ pq;
	private final Hammingcomparator compare_ham;
	private final Manhattancomparator compare_man;
	private int minstep;
	private final List<Board> sol;
	boolean solved=false;

    // find a solution to the initial board (using the A* algorithm)
    public Solver(Board initial) {
    	if(initial==null) throw new IllegalArgumentException();
    	compare_ham=new Hammingcomparator();
    	compare_man=new Manhattancomparator();
    	sol=new ArrayList<Board>();
    	minstep=-1;
    	pq=new MinPQ(compare_ham);
    	pq.insert(initial);
    	Board current=null,pre=null;
    	solved=false;
    	while(!pq.isEmpty()) {
    		current=(Board) pq.delMin();
    		sol.add(current);
    		minstep++;
    		if(current.isGoal()) {
    			solved=true;
    			break;
    		}
    		for(Board nei: current.neighbors()) {
    			if(!nei.equals(pre)) pq.insert(nei);
    			pre=current;	
    		}
    	}
    
    }
	private class Hammingcomparator implements Comparator<Board>{

		@Override
		public int compare(Board o1, Board o2) {
			// TODO Auto-generated method stub
			return o1.hamming()-o2.hamming();
		}
		
	}
	
	private class Manhattancomparator implements Comparator<Board>{
		
		@Override
		public int compare(Board o1, Board o2) {
			return o1.manhattan()-o2.manhattan();
		}
	}

    // is the initial board solvable? (see below)
    public boolean isSolvable() {
    	return solved;
    }

    // min number of moves to solve initial board
    public int moves() {
    	return minstep;
    }

    // sequence of boards in a shortest solution
    public Iterable<Board> solution(){
    	return sol;
    }

    // test client (see below) 
    public static void main(String[] args) {
    	int[][]tiles= {{1,2,3},{4,5,6},{8,7,0}};
    	Board b =new Board(tiles);
    	Solver s=new Solver(b);
    	StdOut.println(s.isSolvable());
    	StdOut.println(s.moves());
    	for(Board i : s.solution()) {
    		StdOut.println(i.toString());
    	}
    }

}